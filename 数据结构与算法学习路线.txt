### **数据结构与算法学习路线（完整版）**

#### **1. 数组（Array）**
**常用操作：**
• 插入、删除、查找（线性查找、二分查找）
• 排序（冒泡排序、选择排序、插入排序、快速排序、归并排序）
• 数组的逆序、旋转
• 子数组问题（最大子数组和、滑动窗口）

**重要性：**
数组是最基础的数据结构，理解数组是学习其他数据结构的基础。

**典型题目：**
• [两数之和](https://leetcode.cn/problems/two-sum/)
• [最大子数组和](https://leetcode.cn/problems/maximum-subarray/)
• [旋转数组](https://leetcode.cn/problems/rotate-array/)

---

#### **2. 链表（Linked List）**
**常用操作：**
• 插入、删除、查找
• 反转链表
• 检测环（快慢指针）
• 合并两个有序链表
• 链表排序（归并排序、插入排序）

**重要性：**
链表是动态数据结构的基础，理解指针和动态内存分配的关键。

**典型题目：**
• [反转链表](https://leetcode.cn/problems/reverse-linked-list/)
• [环形链表](https://leetcode.cn/problems/linked-list-cycle/)
• [合并两个有序链表](https://leetcode.cn/problems/merge-two-sorted-lists/)

---

#### **3. 栈（Stack）**
**常用操作：**
• 入栈（push）、出栈（pop）
• 栈的逆序
• 括号匹配、表达式求值（中缀转后缀）
• 深度优先搜索（DFS）

**重要性：**
栈是递归和回溯算法的基础，广泛应用于表达式计算和算法设计。

**典型题目：**
• [有效的括号](https://leetcode.cn/problems/valid-parentheses/)
• [最小栈](https://leetcode.cn/problems/min-stack/)
• [逆波兰表达式求值](https://leetcode.cn/problems/evaluate-reverse-polish-notation/)

---

#### **4. 队列（Queue）**
**常用操作：**
• 入队（enqueue）、出队（dequeue）
• 循环队列、双端队列（Deque）
• 广度优先搜索（BFS）
• 滑动窗口问题

**重要性：**
队列是BFS和任务调度的核心数据结构。

**典型题目：**
• [滑动窗口最大值](https://leetcode.cn/problems/sliding-window-maximum/)
• [用队列实现栈](https://leetcode.cn/problems/implement-stack-using-queues/)
• [二叉树的层序遍历](https://leetcode.cn/problems/binary-tree-level-order-traversal/)

---

#### **5. 二叉树（Binary Tree）**
**常用操作：**
• 遍历（前序、中序、后序、层序）
• 查找、插入、删除
• 树的深度、高度、直径
• 最近公共祖先（LCA）
• 判断是否为平衡二叉树
• 判断是否为完全二叉树
• 二叉树的镜像（反转二叉树）

**重要性：**
二叉树是树结构的基础，理解递归和分层数据组织的关键。

**典型题目：**
• [二叉树的中序遍历](https://leetcode.cn/problems/binary-tree-inorder-traversal/)
• [对称二叉树](https://leetcode.cn/problems/symmetric-tree/)
• [二叉树的直径](https://leetcode.cn/problems/diameter-of-binary-tree/)

---

#### **6. 二叉搜索树（Binary Search Tree, BST）**
**常用操作：**
• 查找、插入、删除
• 查找最小值、最大值
• 查找前驱节点、后继节点
• 判断是否为二叉搜索树
• 将有序数组转换为二叉搜索树
• 将二叉搜索树转换为有序双向链表
• 范围查找（查找某个范围内的所有节点）

**重要性：**
二叉搜索树是高效查找和排序的核心数据结构，广泛应用于数据库和算法设计。

**典型题目：**
• [验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)
• [二叉搜索树中的插入操作](https://leetcode.cn/problems/insert-into-a-binary-search-tree/)
• [二叉搜索树迭代器](https://leetcode.cn/problems/binary-search-tree-iterator/)

---

#### **7. 图（Graph）**
**常用操作：**
• 遍历（DFS、BFS）
• 最短路径（Dijkstra算法、Floyd-Warshall算法）
• 最小生成树（Kruskal算法、Prim算法）
• 拓扑排序
• 强连通分量（Tarjan算法）

**重要性：**
图是复杂关系建模的核心数据结构，广泛应用于网络、社交网络和路径规划。

**典型题目：**
• [课程表](https://leetcode.cn/problems/course-schedule/)
• [岛屿数量](https://leetcode.cn/problems/number-of-islands/)
• [网络延迟时间](https://leetcode.cn/problems/network-delay-time/)

---

#### **8. 哈希表（Hash Table）**
**常用操作：**
• 插入、删除、查找
• 解决冲突（链地址法、开放地址法）
• 哈希函数的构造
• 哈希表的扩容与缩容

**重要性：**
哈希表是高效查找和去重的核心数据结构。

**典型题目：**
• [字母异位词分组](https://leetcode.cn/problems/group-anagrams/)
• [两数之和](https://leetcode.cn/problems/two-sum/)
• [LRU缓存机制](https://leetcode.cn/problems/lru-cache/)

---

#### **9. 堆（Heap）**
**常用操作：**
• 插入、删除
• 堆排序
• 优先队列的实现
• Top K问题

**重要性：**
堆是动态优先级管理的核心数据结构，广泛应用于任务调度和算法优化。

**典型题目：**
• [数组中的第K个最大元素](https://leetcode.cn/problems/kth-largest-element-in-an-array/)
• [合并K个升序链表](https://leetcode.cn/problems/merge-k-sorted-lists/)
• [数据流的中位数](https://leetcode.cn/problems/find-median-from-data-stream/)

---

### **二、补充算法**
#### **1. 排序算法**
**常用算法：**
• 冒泡排序、选择排序、插入排序
• 快速排序、归并排序
• 堆排序、计数排序、桶排序、基数排序

**典型题目：**
• [排序数组](https://leetcode.cn/problems/sort-an-array/)
• [合并区间](https://leetcode.cn/problems/merge-intervals/)
• [最大数](https://leetcode.cn/problems/largest-number/)

---

#### **2. 查找算法**
**常用算法：**
• 二分查找
• 哈希查找
• 二叉搜索树查找

**典型题目：**
• [二分查找](https://leetcode.cn/problems/binary-search/)
• [搜索旋转排序数组](https://leetcode.cn/problems/search-in-rotated-sorted-array/)
• [寻找峰值](https://leetcode.cn/problems/find-peak-element/)

---

#### **3. 动态规划（DP）**
**常用问题：**
• 背包问题（0-1背包、完全背包）
• 最长公共子序列（LCS）
• 最长递增子序列（LIS）
• 股票买卖问题

**典型题目：**
• [爬楼梯](https://leetcode.cn/problems/climbing-stairs/)
• [打家劫舍](https://leetcode.cn/problems/house-robber/)
• [零钱兑换](https://leetcode.cn/problems/coin-change/)

---

#### **4. 贪心算法**
**常用问题：**
• 区间调度
• 分配问题
• 哈夫曼编码

**典型题目：**
• [分发饼干](https://leetcode.cn/problems/assign-cookies/)
• [无重叠区间](https://leetcode.cn/problems/non-overlapping-intervals/)
• [合并果子](https://www.luogu.com.cn/problem/P1090)

---

#### **5. 回溯算法**
**常用问题：**
• 全排列
• 子集问题
• N皇后问题

**典型题目：**
• [全排列](https://leetcode.cn/problems/permutations/)
• [子集](https://leetcode.cn/problems/subsets/)
• [组合总和](https://leetcode.cn/problems/combination-sum/)

---

#### **6. 分治算法**
**常用问题：**
• 归并排序
• 快速排序
• 最近点对问题

**典型题目：**
• [多数元素](https://leetcode.cn/problems/majority-element/)
• [最大子数组和](https://leetcode.cn/problems/maximum-subarray/)
• [Pow(x, n)](https://leetcode.cn/problems/powx-n/)

---

### **三、学习建议**
1. **按顺序学习**：从基础数据结构（数组、链表）开始，逐步过渡到高级数据结构（图、堆）。
2. **结合题目练习**：每学完一个数据结构或算法，立即通过典型题目巩固。
3. **总结套路**：如DFS/BFS的模板、动态规划的状态转移方程等。
4. **反复复习**：定期回顾已学内容，避免遗忘。

通过系统学习和大量练习，你将逐步掌握这些核心数据结构和算法，提升解决问题的能力！ 🚀